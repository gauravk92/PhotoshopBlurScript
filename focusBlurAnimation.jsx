var Lipses = [];var Ellipses = [];var Rainbow; // opacityvar Bgimg; // blurvar BlurRange=[50, 167.7]; //gaussian blur values from min to max var Percentage;var Resize = [];var dupeLayers = [];var dupeBgLayers = [];var SAVE_DIRECTORY_PREFIX = "/Users/gauravk92/Desktop/blur";var FrameCount = 15;// easeInOut: http://docs.sencha.com/extjs/4.0.7/source/Easing.htmlfunction easeInOut(n) {    var q = 0.48 - n / 1.04,    Q = Math.sqrt(0.1734 + q * q),    x = Q - q,    X = Math.pow(Math.abs(x), 1/3) * (x < 0 ? -1 : 1),    y = -Q - q,    Y = Math.pow(Math.abs(y), 1/3) * (y < 0 ? -1 : 1),    t = X + Y + 0.5;    return (1 - t) * 3 * t * t + t * t * t;}function setResize(layer, value) {    var width = layer.bounds[2] - layer.bounds[0];    var height = layer.bounds[3] - layer.bounds[1];    var origWidth = layer.originalBounds[2] - layer.originalBounds[0];    var origHeight = layer.originalBounds[3] - layer.originalBounds[1];    if (value < 1) {        var newLayer = layer.duplicate();        newLayer.resize(Number(value)*100, Number(value)*100, AnchorPosition.MIDDLECENTER);        newLayer.visible = true;        dupeLayers.push(newLayer);        layer.visible = false;    }    //if (value == 0) {    //    value = .01;    //}//~     var endWidth = origWidth * value;//~     var endHeight = origHeight * value;//~     if (endWidth == 0) {//~         endWidth = 1;//~     }//~     if (endHeight == 0) {//~         endHeight = 1;//~     }//~     if (width == 0) {//~        width = 1;//~     }//~     if (height == 0) {//~         height = 1;//~     }//~     var widthPercent = endWidth / width;//~     var heightPercent = endHeight / height;//~     $.writeln("width: " + widthPercent);//~     //resizeLayer(layer, widthPercent, heightPercent);//~     if (widthPercent > 1 && widthPercent < Infinity) {//~         layer.resize(Number(widthPercent), Number(heightPercent), AnchorPosition.MIDDLECENTER);//~         layer.visible = true;//~     } else if (widthPercent < 0 || widthPercent == Infinity) {//~          layer.visible = false;//~     }}function setLayers(layerNode) {        for (var i=0; i<layerNode.length; i++) {        setLayers(layerNode[i].layerSets);        for(var layerIndex=0; layerIndex < layerNode[i].artLayers.length; layerIndex++) {            var layer=layerNode[i].artLayers[layerIndex];            if (layer.name.substring(0,5) == "Lipse") {                //$.writeln(layer.name);                layer.originalBounds = layer.bounds;                layer.originalOpacity = layer.opacity;                //$.writeln(layer.originalBounds);                Lipses.push(layer);                Resize.push(layer);            }            if (layer.name.substring(0, 7) == "Ellipse") {                //$.writeln(layer.name);                layer.originalBounds = layer.bounds;                layer.originalOpacity = layer.opacity;                //$.writeln(layer.originalBounds);                Ellipses.push(layer);                Resize.push(layer);            }            if (layer.name == "rainbow") {                $.writeln(layer.name);                Rainbow = layer;            }            if (layer.name == "bgimg") {                $.writeln(layer.name);                Bgimg = layer;            }        }    }}function resizeLayer(layer, widthPercent, heightPercent){    //var startRulerUnits = app.preferences.rulerUnits;    //var doc = activeDocument;    //var res= doc.resolution;    //var LB = activeDocument.activeLayer.bounds;    //var Height = LB[3].value - LB[1].value;    //var onePix = 100/Height;    //var newSize = onePix * (res * 6);    layer.resize( widthPercent, heightPercent, AnchorPosition.MIDDLECENTER);    //app.preferences.rulerUnits = startRulerUnits;}function performOperation(value) {    for (var i=0;i<dupeLayers.length;i++) {        dupeLayers[i].visible = false;    }    for (var i=0;i<Resize.length;i++) {        setResize(Resize[i], value);    }    Rainbow.opacity = Number(value)*100;        for (var i=0;i<dupeBgLayers.length;i++) {        dupeBgLayers[i].visible = false;    }        var radius = (value * (BlurRange[1] - BlurRange[0])) + BlurRange[0];    var newLayer = Bgimg.duplicate();    Bgimg.visible = false;    newLayer.visible = true;    newLayer.applyGaussianBlur(radius);    dupeBgLayers.push(newLayer);}function saveDocument(index) {    var opts, file;    opts = new ExportOptionsSaveForWeb();    opts.format = SaveDocumentType.PNG;    opts.PNG8 = false;    opts.quality = 100;    pngFile = new File(SAVE_DIRECTORY_PREFIX + index + "@2x.png");    app.activeDocument.exportDocument(pngFile, ExportType.SAVEFORWEB, opts);  }var startRulerUnits = app.preferences.rulerUnits;var startTypeUnits = app.preferences.typeUnits;var startDisplayDialogs = app.displayDialogs;app.preferences.rulerUnits = Units.PIXELS;app.preferences.typeUnits = TypeUnits.PIXELS;app.displayDialogs = DialogModes.NO;setLayers(app.activeDocument.layerSets);// work backwardsfor (var index=FrameCount;index>0;index--) {    Percentage = easeInOut( (1 / (FrameCount - 1)) * (index - 1) );    $.writeln(Percentage);    performOperation(Percentage);    saveDocument(index);}// Reset the application preferences app.preferences.rulerUnits = startRulerUnits;app.preferences.typeUnits = startTypeUnits;app.displayDialogs = startDisplayDialogs;